pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub-creds'
        FRONTEND_IMAGE_NAME = 'pran1936/chat-app-frontend'
        BACKEND_IMAGE_NAME = 'pran1936/chat-app-backend'
        FRONTEND_YAML = 'k8s/frontend-deployment.yaml'
        BACKEND_YAML = 'k8s/backend-deployment.yaml'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/PKmahto9771/ClusterComm.git', branch: 'main'
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Frontend Image') {
                    steps {
                        script {
                            docker.build("${FRONTEND_IMAGE_NAME}:1.0", "-f frontend/Dockerfile frontend/")
                        }
                    }
                }
                stage('Build Backend Image') {
                    steps {
                        script {
                            docker.build("${BACKEND_IMAGE_NAME}:1.0", "-f backend/Dockerfile backend/")
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            parallel {
                stage('Push Frontend Image') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                                docker.image("${FRONTEND_IMAGE_NAME}:1.0").push('1.0')
                            }
                        }
                    }
                }
                stage('Push Backend Image') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                                docker.image("${BACKEND_IMAGE_NAME}:1.0").push('1.0')
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'argocd-creds', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASS')]) {
                        sh '''
                        argocd login http://192.168.49.2:443 --username $ARGOCD_USER --password $ARGOCD_PASS --insecure
                        
                        argocd app sync ClusterComm --insecure
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}